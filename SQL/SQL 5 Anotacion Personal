--------------------------------------------------------------------------------------GRUPOS------------------------------------------------------------------------
Las sentencias en grupo nos permiten afectar a toda la columna de campos:

AVG() nos permite sacar la media

MAX() nos permite sacar el valor maximo de la columna

MIN() nos permite sacar el valor mas pequeÃ±o de la columna

SUM() nos permite sumar todos los valores de la columna

COUNT(*) Nos permite devolver el numero total de tablas

COUNT(SALARY) Nos permite contar las celdas totatles que no esten vacias de salario, al espesificar que seldas queremos contar podemos espesificar si queremos que los valores null no se cuenten.

COUNT(DISTINCT SALARY) Devuelve los valores no nullos pero que sean distintos entre ellos.

AVG(NVL(SALARY,0)) Las funciones de agrupacion ignoran los nulls , poniendo un nvl en la funcion podemos obligar a estas funciones a tomar en cuenta los nulls dandoles un valor real


Estos a su ves pueden trabajar con valores numericos de todo tipo incluso fechas.


select 
    AVG(SALARY)
    ,MAX(SALARY)
    ,MIN(SALARY)
    ,SUM(SALARY)
    ,MIN(HIRE_DATE)
    ,MAX(HIRE_DATE)
    ,COUNT(*)
    ,COUNT(salary)
    ,COUNT(DISTINCT SALARY)
    ,AVG(NVL(SALARY,0))
FROM
    HR.EMPLOYEES
WHERE
    JOB_ID LIKE '%REP%';


--------------------------------------------------------------------------------------------------------------------------------------------
En esta nueva sentencia tenemos una nueva parte en el codigo, el group by, esto nos permite agrupar los datos que estamos haciendo la consulta, es decir, poner los resoltados por cada uno de los datos.


SELECT
    DEPARTMENT_ID
    ,AVG(SALARY)
    ,COUNT(DEPARTMENT_ID)
FROM 
    HR.EMPLOYEES
GROUP BY 
    DEPARTMENT_ID;

--------------------------------------------------------------------------------------------------------------------------------
Por el momento parece que al agrupar por 2 elementos, el primer elemento dice cuantos del segundo elemento tiene el total del salario. por ende si hay dos de department_id que tienen diferentes job_id se repiten. Cabe aclarar que no podemos restringir con WHERE con grupos.



SELECT
    DEPARTMENT_ID
    ,JOB_ID
    ,SUM(SALARY)
FROM
    HR.EMPLOYEES
GROUP BY
    DEPARTMENT_ID,JOB_ID;


-----------------------------------------------------------------------------------------------------------------------------------------------------------
SQL ORACLE no nos permite poner cada seccion de la query como queramos el orden normal es...


SELECT
FROM
WHERE
GROUP BY
HAVING
ORDER BY



EN caso de no poner alguno, brincamos al siguiente....


Para poder condicionar resultados agrupados tenemos que usar el having en ves del where, en este caso estamos sacando el maximo salario de cada uno de los departamentos id, solo en caso de que le salario supere los 10,000 y estamos ordenando los resultados por el departamento id de manera ASC.


SELECT
    DEPARTMENT_ID
    ,MAX(SALARY)
FROM
    HR.EMPLOYEES
GROUP BY
    DEPARTMENT_ID
HAVING 
    MAX(SALARY) > 10000
ORDER BY
    DEPARTMENT_ID ASC;